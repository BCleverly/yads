# YADS Enhanced Test Environment Dockerfile
# Ubuntu 24.04 LTS with comprehensive YADS testing capabilities

FROM ubuntu:24.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV YADS_TEST_MODE=true

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    sudo \
    systemd \
    systemd-sysv \
    dbus \
    ca-certificates \
    gnupg \
    lsb-release \
    software-properties-common \
    apt-transport-https \
    dos2unix \
    acl \
    && rm -rf /var/lib/apt/lists/*

# Create test users
RUN useradd -m -s /bin/bash yadsuser && \
    useradd -r -s /bin/bash -d /home/vscode -m vscode && \
    echo "yadsuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers && \
    echo "vscode ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Create webdev group
RUN groupadd webdev && \
    usermod -a -G webdev yadsuser && \
    usermod -a -G webdev vscode

# Set up systemd (required for services)
RUN systemctl set-default multi-user.target

# Copy YADS repository
COPY . /home/yadsuser/yads
WORKDIR /home/yadsuser/yads

# Fix line endings and make scripts executable
RUN find . -name "*.sh" -o -name "yads" | xargs dos2unix 2>/dev/null || true && \
    chmod +x *.sh && \
    chmod +x modules/*.sh && \
    chmod +x tests/unit/*.bats 2>/dev/null || true

# Set up local development environment
RUN ./local-setup.sh

# Create comprehensive test script
RUN cat > /home/yadsuser/test-yads-comprehensive.sh << 'EOF'
#!/bin/bash

# YADS Comprehensive Test Script
# Tests all YADS functionality in Docker container

set -euo pipefail

# Color setup
setup_colors() {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;94m'
        CYAN='\033[0;96m'
        WHITE='\033[1;37m'
        GRAY='\033[0;37m'
        NC='\033[0m'
    else
        RED=''
        GREEN=''
        YELLOW=''
        BLUE=''
        CYAN=''
        NC=''
    fi
}

# Logging functions
log() {
    echo -e "$1" >&2
}

info() {
    log "${BLUE}ℹ️  $1${NC}"
}

success() {
    log "${GREEN}✅ $1${NC}"
}

warning() {
    log "${YELLOW}⚠️  $1${NC}"
}

error() {
    log "${RED}❌ $1${NC}"
}

# Test counter
tests_passed=0
tests_total=0

# Test function
test_command() {
    local cmd="$1"
    local description="$2"
    local expected_exit_code="${3:-0}"
    
    ((tests_total++))
    info "Testing: $description"
    
    if eval "$cmd" >/dev/null 2>&1; then
        if [[ $? -eq $expected_exit_code ]]; then
            success "$description - PASS"
            ((tests_passed++))
            return 0
        else
            error "$description - FAIL (wrong exit code: $?)"
            return 1
        fi
    else
        if [[ $? -eq $expected_exit_code ]]; then
            success "$description - PASS (expected failure)"
            ((tests_passed++))
            return 0
        else
            error "$description - FAIL (unexpected error: $?)"
            return 1
        fi
    fi
}

# Initialize colors
setup_colors

info "🧪 YADS Comprehensive Test Suite"
echo "================================="
echo

# 1. Basic Functionality Tests
info "📋 1. Basic Functionality Tests"
echo "==============================="

test_command "yads --version" "yads --version command"
test_command "yads help" "yads help command"
test_command "yads status" "yads status command"
test_command "yads --test-colors" "yads color test"
test_command "yads --debug-paths" "yads debug paths"

echo

# 2. Module Loading Tests
info "📦 2. Module Loading Tests"
echo "=========================="

local modules=("php" "webserver" "database" "tunnel" "vscode" "project" "services" "uninstall")
for module in "${modules[@]}"; do
    test_command "[[ -f modules/${module}.sh ]] && [[ -x modules/${module}.sh ]]" "Module ${module}.sh exists and is executable"
done

echo

# 3. Installation Tests
info "🚀 3. Installation Tests"
echo "======================="

test_command "[[ -f install.sh ]] && [[ -x install.sh ]]" "install.sh exists and is executable"
test_command "[[ -f local-setup.sh ]] && [[ -x local-setup.sh ]]" "local-setup.sh exists and is executable"
test_command "[[ -d modules ]] && [[ -d tests ]]" "Required directories exist"

echo

# 4. Permission Tests
info "🔐 4. Permission Tests"
echo "====================="

test_command "[[ -w /home/yadsuser/yads ]]" "YADS directory is writable"
test_command "[[ -x /home/yadsuser/yads/yads ]]" "yads script is executable"
test_command "[[ -x /home/yadsuser/yads/install.sh ]]" "install.sh is executable"

echo

# 5. Docker Environment Tests
info "🐳 5. Docker Environment Tests"
echo "=============================="

test_command "[[ -f /.dockerenv ]]" "Running in Docker container"
test_command "command -v systemctl >/dev/null 2>&1" "systemctl available"
test_command "command -v sudo >/dev/null 2>&1" "sudo available"
test_command "id yadsuser >/dev/null 2>&1" "yadsuser exists"
test_command "id vscode >/dev/null 2>&1" "vscode user exists"
test_command "getent group webdev >/dev/null 2>&1" "webdev group exists"

echo

# 6. No-Sudo Command Tests
info "🚫 6. No-Sudo Command Tests"
echo "==========================="

test_command "yads update" "yads update (no sudo required)"
test_command "yads tunnel setup" "yads tunnel setup (no sudo required)"
test_command "yads vscode setup" "yads vscode setup (no sudo required)"
test_command "yads project test-project" "yads project creation (no sudo required)"

echo

# 7. Service Management Tests
info "⚙️  7. Service Management Tests"
echo "=============================="

test_command "yads start" "yads start command"
test_command "yads stop" "yads stop command"
test_command "yads restart" "yads restart command"
test_command "yads status" "yads status command"

echo

# 8. Module-Specific Tests
info "🔧 8. Module-Specific Tests"
echo "==========================="

test_command "yads php 8.4" "yads php command"
test_command "yads server nginx" "yads server command"
test_command "yads database mysql" "yads database command"
test_command "yads vscode status" "yads vscode status"

echo

# 9. File System Tests
info "📁 9. File System Tests"
echo "======================="

test_command "mkdir -p /tmp/yads-test && touch /tmp/yads-test/test.txt" "File creation test"
test_command "echo 'test' > /tmp/yads-test/test.txt && cat /tmp/yads-test/test.txt" "File write/read test"
test_command "rm -rf /tmp/yads-test" "File deletion test"

echo

# 10. Network Tests
info "🌐 10. Network Tests"
echo "==================="

test_command "curl -s --connect-timeout 5 http://localhost:8080 >/dev/null || true" "VS Code Server port test"
test_command "curl -s --connect-timeout 5 http://localhost:80 >/dev/null || true" "Web server port test"

echo

# Show test summary
info "📊 Test Summary"
echo "==============="
echo
info "Tests passed: $tests_passed/$tests_total"

if [[ $tests_passed -eq $tests_total ]]; then
    success "🎉 All tests passed! YADS is working perfectly in Docker."
else
    warning "⚠️  Some tests failed. Check the output above for details."
fi

echo
info "Next steps:"
info "  1. Run full installation: sudo ./install.sh"
info "  2. Test services: yads status"
info "  3. Create projects: yads project myapp"
info "  4. Access VS Code: http://localhost:8080"
echo
EOF

# Fix line endings and make executable
RUN sed -i 's/\r$//' /home/yadsuser/test-yads-comprehensive.sh && \
    chmod +x /home/yadsuser/test-yads-comprehensive.sh

# Create permission fix script for container
RUN cat > /home/yadsuser/fix-permissions-docker.sh << 'EOF'
#!/bin/bash

# Fix permissions in Docker container
set -euo pipefail

info() { echo "ℹ️  $1"; }
success() { echo "✅ $1"; }

info "Fixing permissions in Docker container..."

# Create projects directory
sudo mkdir -p /var/www/projects
sudo chown -R yadsuser:webdev /var/www/projects
sudo chmod -R 775 /var/www/projects

# Set up VS Code Server
sudo mkdir -p /home/vscode/.config/code-server
sudo chown -R vscode:webdev /home/vscode
sudo chmod -R 755 /home/vscode

# Create VS Code config
sudo -u vscode tee /home/vscode/.config/code-server/config.yaml > /dev/null << 'YAML'
bind-addr: 0.0.0.0:8080
auth: password
password: yads123
cert: false
YAML

sudo chown vscode:webdev /home/vscode/.config/code-server/config.yaml
sudo chmod 600 /home/vscode/.config/code-server/config.yaml

success "Permissions fixed in Docker container"
EOF

RUN chmod +x /home/yadsuser/fix-permissions-docker.sh

# Switch to non-root user
USER yadsuser

# Set up environment
ENV PATH="/home/yadsuser/.local/bin:$PATH"
ENV HOME="/home/yadsuser"

# Expose ports for services
EXPOSE 80 443 8080 3306 5432 6379

# Create enhanced entrypoint script
RUN cat > /home/yadsuser/entrypoint.sh << 'EOF'
#!/bin/bash

echo "🐳 YADS Enhanced Docker Container Started"
echo "========================================="
echo

echo "Container Information:"
echo "  OS: $(lsb_release -d | cut -f2)"
echo "  User: $(whoami)"
echo "  Home: $HOME"
echo "  Working Directory: $(pwd)"
echo "  Docker: $(if [[ -f /.dockerenv ]]; then echo "Yes"; else echo "No"; fi)"
echo

echo "Available Commands:"
echo "  ./test-yads-comprehensive.sh  - Run comprehensive YADS tests"
echo "  ./fix-permissions-docker.sh   - Fix permissions in container"
echo "  sudo ./install.sh             - Install YADS system-wide"
echo "  yads help                     - Show YADS help"
echo "  yads status                   - Check YADS status"
echo

echo "Testing Environment:"
echo "  User groups: $(groups)"
echo "  Webdev group: $(getent group webdev || echo "Not found")"
echo "  Projects directory: $(ls -la /var/www/projects 2>/dev/null || echo "Not found")"
echo

# Fix permissions
./fix-permissions-docker.sh

echo "YADS Status:"
yads status
echo

echo "To run comprehensive tests:"
echo "  ./test-yads-comprehensive.sh"
echo

echo "To start interactive shell:"
echo "  docker exec -it <container_name> bash"
echo

# Keep container running
tail -f /dev/null
EOF

# Fix line endings and make executable
RUN sed -i 's/\r$//' /home/yadsuser/entrypoint.sh && \
    chmod +x /home/yadsuser/entrypoint.sh

# Set entrypoint
ENTRYPOINT ["/bin/bash", "/home/yadsuser/entrypoint.sh"]