name: YADS Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test-ubuntu:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        ubuntu-version: [20.04, 22.04, 24.04]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Ubuntu ${{ matrix.ubuntu-version }}
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Bats
      run: |
        sudo apt-get update
        sudo apt-get install -y bats
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget gnupg2 software-properties-common
    
    - name: Run YADS tests
      run: |
        cd tests
        ./run-tests.sh --all
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-ubuntu-${{ matrix.ubuntu-version }}
        path: tests/reports/
        retention-days: 30

  test-debian:
    name: Test on Debian
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        debian-version: [11, 12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Debian ${{ matrix.debian-version }}
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Bats
      run: |
        sudo apt-get update
        sudo apt-get install -y bats
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget gnupg2 software-properties-common
    
    - name: Run YADS tests
      run: |
        cd tests
        ./run-tests.sh --all
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-debian-${{ matrix.debian-version }}
        path: tests/reports/
        retention-days: 30

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Ubuntu 22.04
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Bats
      run: |
        sudo apt-get update
        sudo apt-get install -y bats
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget gnupg2 software-properties-common
    
    - name: Test YADS installation
      run: |
        # Test the install script
        chmod +x install.sh
        ./install.sh --help || true
    
    - name: Test YADS main script
      run: |
        # Test the main script
        chmod +x yads
        ./yads help
        ./yads status
    
    - name: Test YADS modules
      run: |
        # Test individual modules
        chmod +x modules/*.sh
        bash -n modules/install.sh
        bash -n modules/domains.sh
        bash -n modules/projects.sh
    
    - name: Run integration tests
      run: |
        cd tests
        ./run-tests.sh --all
    
    - name: Upload integration test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-reports
        path: tests/reports/
        retention-days: 30

  test-security:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install security tools
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
    
    - name: Run ShellCheck
      run: |
        shellcheck yads
        shellcheck modules/*.sh
        shellcheck tests/*.sh
        shellcheck install.sh
    
    - name: Check for security issues
      run: |
        # Check for hardcoded passwords or secrets
        grep -r "password\|secret\|key" . --exclude-dir=.git --exclude-dir=reports || true
        
        # Check for proper permissions
        find . -name "*.sh" -exec ls -la {} \;
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: |
          shellcheck-report.txt
        retention-days: 30

  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install performance tools
      run: |
        sudo apt-get update
        sudo apt-get install -y time
    
    - name: Test script performance
      run: |
        # Test script execution time
        time ./yads help
        time ./yads status
        
        # Test module loading time
        time bash -c "source modules/install.sh"
        time bash -c "source modules/domains.sh"
        time bash -c "source modules/projects.sh"
    
    - name: Test memory usage
      run: |
        # Test memory usage
        /usr/bin/time -v ./yads help 2>&1 | grep -E "(Maximum resident set size|User time|System time)"
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-report
        path: performance-report.txt
        retention-days: 30

  test-documentation:
    name: Documentation Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check documentation
      run: |
        # Check if README exists and has content
        test -f README.md
        test -s README.md
        
        # Check if install script has help
        grep -q "Usage:" install.sh || true
        
        # Check if main script has help
        grep -q "Usage:" yads || true
    
    - name: Validate markdown
      run: |
        # Basic markdown validation
        grep -q "# YADS" README.md
        grep -q "## Features" README.md
        grep -q "## Quick Start" README.md

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-ubuntu, test-debian, test-integration, test-security, test-performance, test-documentation]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test-ubuntu.result == 'success' && needs.test-debian.result == 'success' && needs.test-integration.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
    
    - name: Notify on failure
      if: ${{ needs.test-ubuntu.result == 'failure' || needs.test-debian.result == 'failure' || needs.test-integration.result == 'failure' }}
      run: |
        echo "❌ Some tests failed. Please check the logs."
        exit 1

