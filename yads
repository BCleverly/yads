#!/bin/bash

# YADS - Yet Another Development Server
# Remote PHP Web Development Server with Cloudflared Tunnels

set -euo pipefail

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MODULES_DIR="${SCRIPT_DIR}/modules"

# Color setup
setup_colors() {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        CYAN='\033[0;36m'
        NC='\033[0m' # No Color
    else
        RED=''
        GREEN=''
        YELLOW=''
        BLUE=''
        CYAN=''
        NC=''
    fi
}

# Logging functions
log() {
    echo -e "$1" >&2
}

error_exit() {
    log "${RED}❌ Error: $1${NC}"
    exit 1
}

warning() {
    log "${YELLOW}⚠️  Warning: $1${NC}"
}

info() {
    log "${BLUE}ℹ️  $1${NC}"
}

success() {
    log "${GREEN}✅ $1${NC}"
}

# Version detection
get_version() {
    # Try Git tags first (preferred)
    if command -v git >/dev/null 2>&1 && [[ -d "${SCRIPT_DIR}/.git" ]]; then
        local git_tag
        git_tag=$(git -C "${SCRIPT_DIR}" describe --tags --exact-match 2>/dev/null || true)
        if [[ -n "${git_tag}" ]]; then
            echo "${git_tag#v}"  # Remove 'v' prefix
            return
        fi
    fi
    
    # Fallback to version file
    if [[ -f "${SCRIPT_DIR}/version" ]]; then
        cat "${SCRIPT_DIR}/version"
        return
    fi
    
    # Fallback to script content
    local version_line
    version_line=$(grep -E '^# Version:' "${SCRIPT_DIR}/yads" 2>/dev/null | head -1 || true)
    if [[ -n "${version_line}" ]]; then
        echo "${version_line#*: }"
        return
    fi
    
    # Default version
    echo "1.0.0"
}

# Check if module exists and is readable
check_module() {
    local module="$1"
    if [[ ! -f "${MODULES_DIR}/${module}.sh" ]]; then
        error_exit "Module '${module}' not found at ${MODULES_DIR}/${module}.sh"
    fi
    if [[ ! -r "${MODULES_DIR}/${module}.sh" ]]; then
        error_exit "Module '${module}' is not readable"
    fi
}

# Source module with error handling
source_module() {
    local module="$1"
    check_module "$module"
    source "${MODULES_DIR}/${module}.sh"
}

# Show help
show_help() {
    cat << EOF
${CYAN}YADS - Yet Another Development Server${NC}
${BLUE}Remote PHP Web Development Server with Cloudflared Tunnels${NC}

${YELLOW}Usage:${NC}
  yads <command> [options]

${YELLOW}Commands:${NC}
  install                 Install YADS development server
  uninstall               Uninstall YADS (preserves SSH keys)
  start                   Start all services
  stop                    Stop all services
  restart                 Restart all services
  status                  Show service status
  php <version>           Install specific PHP version (5.6-8.5)
  server <type>           Switch web server (apache|nginx|frankenphp)
  database <type>         Install database (mysql|postgresql)
  tunnel                  Configure Cloudflared tunnel
  vscode                  Configure VS Code Server
  project <name>          Create new project
  help                    Show this help message
  version                 Show version information

${YELLOW}Examples:${NC}
  yads install                    # Install complete development server
  yads php 8.2                    # Install PHP 8.2
  yads server nginx               # Switch to Nginx
  yads database mysql             # Install MySQL
  yads project myapp              # Create new project 'myapp'
  yads tunnel setup               # Setup Cloudflared tunnel

${YELLOW}Prerequisites:${NC}
  - Ubuntu/Debian/CentOS/RHEL/Fedora/Arch Linux
  - Root or sudo access
  - Internet connection
  - Cloudflare account (for tunnels)

${YELLOW}Version:${NC} $(get_version)
EOF
}

# Main command handler
main() {
    setup_colors
    
    # Handle help and version flags
    case "${1:-}" in
        -h|--help|help)
            show_help
            exit 0
            ;;
        -v|--version|version)
            echo "YADS $(get_version)"
            exit 0
            ;;
        "")
            show_help
            exit 1
            ;;
    esac
    
    local command="$1"
    shift 2>/dev/null || true
    
    # Source appropriate module based on command
    case "$command" in
        install)
            source_module "install"
            install_main "$@"
            ;;
        uninstall)
            source_module "uninstall"
            uninstall_main "$@"
            ;;
        start|stop|restart|status)
            source_module "services"
            services_main "$command" "$@"
            ;;
        php)
            source_module "php"
            php_main "$@"
            ;;
        server)
            source_module "webserver"
            webserver_main "$@"
            ;;
        database)
            source_module "database"
            database_main "$@"
            ;;
        tunnel)
            source_module "tunnel"
            tunnel_main "$@"
            ;;
        vscode)
            source_module "vscode"
            vscode_main "$@"
            ;;
        project)
            source_module "project"
            project_main "$@"
            ;;
        *)
            error_exit "Unknown command: $command. Use 'yads help' for available commands."
            ;;
    esac
}

# Run main function with all arguments
main "$@"
