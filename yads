#!/bin/bash

# YADS - Container Management & Orchestration
# Lightweight container manager for Docker-based development environment

set -euo pipefail

# Script directory - handle symlinks properly
get_script_dir() {
    local source="${BASH_SOURCE[0]}"
    while [[ -L "$source" ]]; do
        local dir="$(cd -P "$(dirname "$source")" && pwd)"
        source="$(readlink "$source")"
        if [[ "$source" != /* ]]; then
            source="$dir/$source"
        fi
    done
    echo "$(cd -P "$(dirname "$source")" && pwd)"
}

SCRIPT_DIR="$(get_script_dir)"
YADS_DIR="$SCRIPT_DIR"

# Color setup
setup_colors() {
    if [[ -t 1 ]] && [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]] && [[ "${TERM-}" != "unknown" ]]; then
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;94m'
        CYAN='\033[0;96m'
        WHITE='\033[1;37m'
        GRAY='\033[0;37m'
        NC='\033[0m'
    else
        RED=''
        GREEN=''
        YELLOW=''
        BLUE=''
        CYAN=''
        WHITE=''
        GRAY=''
        NC=''
    fi
}

# Logging functions
log() {
    echo -e "$1" >&2
}

error_exit() {
    log "${RED}❌ Error: $1${NC}"
    exit 1
}

warning() {
    log "${YELLOW}⚠️  Warning: $1${NC}"
}

info() {
    log "${BLUE}ℹ️  $1${NC}"
}

success() {
    log "${GREEN}✅ $1${NC}"
}

# Check if Docker is available
check_docker() {
    if ! command -v docker >/dev/null 2>&1; then
        error_exit "Docker is not installed. Please install Docker first."
    fi
    
    if ! docker info >/dev/null 2>&1; then
        error_exit "Docker is not running. Please start Docker first."
    fi
}

# Check if Docker Compose is available
check_docker_compose() {
    if ! command -v docker-compose >/dev/null 2>&1; then
        error_exit "Docker Compose is not installed. Please install Docker Compose first."
    fi
}

# Get domain from environment
get_domain() {
    if [[ -f ".env" ]]; then
        grep "^DOMAIN=" .env 2>/dev/null | cut -d'=' -f2 | tr -d '"' || echo "localhost"
    else
        echo "localhost"
    fi
}

# Container Management Functions

# Start core services
start_core() {
    info "🚀 Starting YADS core services..."
    
    check_docker
    check_docker_compose
    
    # Start core services
    docker-compose up -d
    
    success "Core services started"
    show_service_urls
}

# Stop core services
stop_core() {
    info "🛑 Stopping YADS core services..."
    
    docker-compose down
    
    success "Core services stopped"
}

# Restart core services
restart_core() {
    info "🔄 Restarting YADS core services..."
    
    stop_core
    start_core
}

# Show service status
show_status() {
    info "📊 YADS Container Status:"
    echo
    
    # Show running containers
    docker-compose ps
    
    echo
    show_service_urls
}

# Show service URLs
show_service_urls() {
    local domain
    domain=$(get_domain)
    
    info "🌐 Service URLs:"
    echo "  📊 Traefik Dashboard: https://traefik.$domain"
    echo "  💻 VS Code Server: https://code.$domain"
    echo "  🗄️  phpMyAdmin: https://phpmyadmin.$domain"
    echo "  🗄️  pgAdmin: https://pgadmin.$domain"
    echo "  🐳 Portainer: https://portainer.$domain"
    echo "  📁 Projects: $YADS_DIR/projects"
}

# Project Management Functions

# Create new project
create_project() {
    local project_name="$1"
    local project_type="${2:-php}"
    local project_dir="$YADS_DIR/projects/$project_name"
    
    info "📁 Creating project: $project_name ($project_type)"
    
    # Validate project name
    if [[ ! "$project_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        error_exit "Project name can only contain letters, numbers, hyphens, and underscores"
    fi
    
    # Check if project already exists
    if [[ -d "$project_dir" ]]; then
        error_exit "Project '$project_name' already exists"
    fi
    
    # Create project directory
    mkdir -p "$project_dir"
    
    # Create project based on type
    case "$project_type" in
        php)
            create_php_project "$project_name" "$project_dir"
            ;;
        laravel)
            create_laravel_project "$project_name" "$project_dir"
            ;;
        symfony)
            create_symfony_project "$project_name" "$project_dir"
            ;;
        wordpress)
            create_wordpress_project "$project_name" "$project_dir"
            ;;
        node)
            create_node_project "$project_name" "$project_dir"
            ;;
        *)
            error_exit "Unknown project type: $project_type"
            ;;
    esac
    
    # Create Docker Compose override
    create_project_compose "$project_name" "$project_type" "$project_dir"
    
    # Deploy project
    setup_project "$project_name"
    
    success "Project '$project_name' created and deployed"
    
    local domain
    domain=$(get_domain)
    info "Access: https://$project_name.$domain"
}

# Create PHP project
create_php_project() {
    local project_name="$1"
    local project_dir="$2"
    
    info "Creating PHP project structure..."
    
    cat > "$project_dir/index.php" << 'EOF'
<?php
echo "<h1>Welcome to " . $_SERVER['HTTP_HOST'] . "</h1>";
echo "<p>PHP Version: " . phpversion() . "</p>";
echo "<p>Server: " . $_SERVER['SERVER_SOFTWARE'] . "</p>";
echo "<p>Document Root: " . $_SERVER['DOCUMENT_ROOT'] . "</p>";
echo "<p>✅ YADS Docker is working correctly!</p>";

if (isset($_GET['info'])) {
    phpinfo();
}
?>
EOF
    
    cat > "$project_dir/composer.json" << EOF
{
    "name": "$project_name/php-project",
    "description": "PHP project created with YADS",
    "type": "project",
    "require": {
        "php": ">=8.0"
    },
    "autoload": {
        "psr-4": {
            "App\\\\": "src/"
        }
    }
}
EOF
    
    success "PHP project structure created"
}

# Create Laravel project
create_laravel_project() {
    local project_name="$1"
    local project_dir="$2"
    
    info "Creating Laravel project..."
    
    # Use Docker to create Laravel project
    docker run --rm -v "$project_dir":/app composer create-project laravel/laravel . --prefer-dist
    
    success "Laravel project created"
}

# Create Symfony project
create_symfony_project() {
    local project_name="$1"
    local project_dir="$2"
    
    info "Creating Symfony project..."
    
    # Use Docker to create Symfony project
    docker run --rm -v "$project_dir":/app composer create-project symfony/skeleton . --prefer-dist
    
    success "Symfony project created"
}

# Create WordPress project
create_wordpress_project() {
    local project_name="$1"
    local project_dir="$2"
    
    info "Creating WordPress project..."
    
    # Download WordPress
    wget -q https://wordpress.org/latest.tar.gz -O "$project_dir/wordpress.tar.gz"
    tar -xzf "$project_dir/wordpress.tar.gz" -C "$project_dir" --strip-components=1
    rm "$project_dir/wordpress.tar.gz"
    
    # Create wp-config.php
    cp "$project_dir/wp-config-sample.php" "$project_dir/wp-config.php"
    
    success "WordPress project created"
}

# Create Node.js project
create_node_project() {
    local project_name="$1"
    local project_dir="$2"
    
    info "Creating Node.js project..."
    
    # Create package.json
    cat > "$project_dir/package.json" << EOF
{
    "name": "$project_name",
    "version": "1.0.0",
    "description": "Node.js project created with YADS",
    "main": "index.js",
    "scripts": {
        "start": "node index.js",
        "dev": "nodemon index.js"
    },
    "dependencies": {
        "express": "^4.18.2"
    },
    "devDependencies": {
        "nodemon": "^3.0.1"
    }
}
EOF
    
    # Create basic Express app
    cat > "$project_dir/index.js" << 'EOF'
const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

app.get('/', (req, res) => {
    res.send(`
        <h1>Welcome to ${req.get('host')}</h1>
        <p>Node.js Version: ${process.version}</p>
        <p>Express Server Running</p>
        <p>✅ YADS Docker is working correctly!</p>
    `);
});

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
EOF
    
    # Create Dockerfile
    cat > "$project_dir/Dockerfile" << 'EOF'
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "start"]
EOF
    
    success "Node.js project created"
}

# Create Docker Compose override for project
create_project_compose() {
    local project_name="$1"
    local project_type="$2"
    local project_dir="$3"
    
    cat > "$project_dir/docker-compose.override.yml" << EOF
version: '3.8'

services:
  $project_name:
    build: .
    container_name: yads-$project_name
    restart: unless-stopped
    volumes:
      - .:/var/www/html
    networks:
      - yads-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.$project_name.rule=Host(\`$project_name.\${DOMAIN:-localhost}\`)"
      - "traefik.http.routers.$project_name.entrypoints=websecure"
      - "traefik.http.routers.$project_name.tls.certresolver=cloudflare"
      - "traefik.http.services.$project_name.loadbalancer.server.port=9000"
    depends_on:
      - mysql
      - postgres
      - redis

networks:
  yads-network:
    external: true
EOF
}

# Setup project dependencies
setup_project() {
    local project_name="$1"
    local project_dir="$YADS_DIR/projects/$project_name"
    
    if [[ ! -d "$project_dir" ]]; then
        error_exit "Project '$project_name' not found"
    fi
    
    info "🔧 Setting up project dependencies: $project_name"
    
    # Check if web server is running
    if ! docker ps --format "table {{.Names}}" | grep -q "yads-nginx"; then
        warning "Web server not running. Starting YADS services..."
        docker-compose up -d nginx php-fpm
    fi
    
    # Install PHP dependencies
    if [[ -f "$project_dir/composer.json" ]]; then
        info "Installing PHP dependencies..."
        docker exec yads-php-fpm composer install --working-dir="/var/www/html/$project_name" --no-dev --optimize-autoloader
    fi
    
    # Install Node.js dependencies
    if [[ -f "$project_dir/package.json" ]]; then
        info "Installing Node.js dependencies..."
        docker exec yads-php-fpm npm install --prefix="/var/www/html/$project_name"
    fi
    
    success "Project '$project_name' setup complete"
    info "Access at: https://$project_name.\${DOMAIN:-localhost}"
    info "Note: Project is automatically accessible via shared web server"
}

# Stop project
stop_project() {
    local project_name="$1"
    local project_dir="$YADS_DIR/projects/$project_name"
    
    if [[ ! -d "$project_dir" ]]; then
        error_exit "Project '$project_name' not found"
    fi
    
    info "🛑 Stopping project: $project_name"
    
    cd "$project_dir"
    
    # Stop project
    docker-compose -f "$YADS_DIR/docker-compose.yml" -f docker-compose.override.yml down
    
    success "Project '$project_name' stopped"
}

# List projects
list_projects() {
    info "📁 Available projects:"
    
    if [[ ! -d "$YADS_DIR/projects" ]]; then
        info "No projects directory found"
        return
    fi
    
    for project in "$YADS_DIR/projects"/*; do
        if [[ -d "$project" ]]; then
            local project_name
            project_name=$(basename "$project")
            local status
            if docker ps --format "table {{.Names}}" | grep -q "yads-$project_name"; then
                status="Running"
            else
                status="Stopped"
            fi
            info "  - $project_name ($status)"
        fi
    done
}

# Database Management Functions

# Create database
create_database() {
    local db_name="$1"
    local db_type="${2:-mysql}"
    
    info "🗄️  Creating database: $db_name ($db_type)"
    
    case "$db_type" in
        mysql)
            create_mysql_database "$db_name"
            ;;
        postgres)
            create_postgres_database "$db_name"
            ;;
        *)
            error_exit "Unknown database type: $db_type"
            ;;
    esac
    
    success "Database '$db_name' created"
}

# Create MySQL database
create_mysql_database() {
    local db_name="$1"
    
    # Get MySQL root password from .env
    local mysql_root_password
    mysql_root_password=$(grep "^MYSQL_ROOT_PASSWORD=" .env 2>/dev/null | cut -d'=' -f2 | tr -d '"' || echo "yads123")
    
    # Create database
    docker exec yads-mysql mysql -u root -p"$mysql_root_password" -e "CREATE DATABASE IF NOT EXISTS $db_name;"
    
    success "MySQL database '$db_name' created"
}

# Create PostgreSQL database
create_postgres_database() {
    local db_name="$1"
    
    # Get PostgreSQL password from .env
    local postgres_password
    postgres_password=$(grep "^POSTGRES_PASSWORD=" .env 2>/dev/null | cut -d'=' -f2 | tr -d '"' || echo "yads123")
    
    # Create database
    docker exec yads-postgres psql -U yads -d postgres -c "CREATE DATABASE $db_name;"
    
    success "PostgreSQL database '$db_name' created"
}

# List databases
list_databases() {
    info "🗄️  Available databases:"
    
    # MySQL databases
    info "MySQL databases:"
    docker exec yads-mysql mysql -u root -pyads123 -e "SHOW DATABASES;" 2>/dev/null | grep -v "Database\|information_schema\|performance_schema\|mysql\|sys" || info "  No MySQL databases found"
    
    # PostgreSQL databases
    info "PostgreSQL databases:"
    docker exec yads-postgres psql -U yads -d postgres -c "\l" 2>/dev/null | grep -v "template\|postgres" || info "  No PostgreSQL databases found"
}

# Container Management Functions

# Show container logs
show_logs() {
    local service="${1:-}"
    
    if [[ -z "$service" ]]; then
        info "Available services:"
        docker-compose ps --services
        return
    fi
    
    info "Showing logs for: $service"
    docker-compose logs -f "$service"
}

# Restart specific service
restart_service() {
    local service="$1"
    
    if [[ -z "$service" ]]; then
        error_exit "Service name required"
    fi
    
    info "🔄 Restarting service: $service"
    
    docker-compose restart "$service"
    
    success "Service '$service' restarted"
}

# Update containers
update_containers() {
    info "🔄 Updating YADS containers..."
    
    # Pull latest images
    docker-compose pull
    
    # Recreate containers with new images
    docker-compose up -d --force-recreate
    
    success "Containers updated"
}

# Backup data
backup_data() {
    local backup_dir="$YADS_DIR/backups/$(date +%Y%m%d_%H%M%S)"
    
    info "💾 Creating backup: $backup_dir"
    
    mkdir -p "$backup_dir"
    
    # Backup MySQL
    docker exec yads-mysql mysqldump -u root -pyads123 --all-databases > "$backup_dir/mysql.sql"
    
    # Backup PostgreSQL
    docker exec yads-postgres pg_dumpall -U yads > "$backup_dir/postgres.sql"
    
    # Backup Redis
    docker exec yads-redis redis-cli --rdb "$backup_dir/redis.rdb"
    
    # Backup projects
    cp -r "$YADS_DIR/projects" "$backup_dir/"
    
    success "Backup created: $backup_dir"
}

# Show help
show_help() {
    echo -e "${CYAN}YADS - Container Management & Orchestration${NC}"
    echo -e "${BLUE}Lightweight container manager for Docker-based development environment${NC}"
    echo
    echo -e "${YELLOW}Usage:${NC}"
    echo -e "${WHITE}  yads <command> [options]${NC}"
    echo
    echo -e "${YELLOW}Core Commands:${NC}"
    echo -e "${WHITE}  start                   Start core services${NC}"
    echo -e "${WHITE}  stop                    Stop core services${NC}"
    echo -e "${WHITE}  restart                 Restart core services${NC}"
    echo -e "${WHITE}  status                  Show service status${NC}"
    echo -e "${WHITE}  logs [service]          Show logs for service${NC}"
    echo -e "${WHITE}  update                  Update containers${NC}"
    echo
    echo -e "${YELLOW}Project Commands:${NC}"
    echo -e "${WHITE}  project <name> [type]   Create new project (php, laravel, symfony, wordpress, node)${NC}"
    echo -e "${WHITE}  setup <name>            Setup project dependencies${NC}"
    echo -e "${WHITE}  stop-project <name>    Stop project${NC}"
    echo -e "${WHITE}  list-projects           List all projects${NC}"
    echo
    echo -e "${YELLOW}Database Commands:${NC}"
    echo -e "${WHITE}  db create <name> [type] Create database (mysql, postgres)${NC}"
    echo -e "${WHITE}  db list                 List all databases${NC}"
    echo
    echo -e "${YELLOW}Container Commands:${NC}"
    echo -e "${WHITE}  restart <service>       Restart specific service${NC}"
    echo -e "${WHITE}  backup                  Create backup of all data${NC}"
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo -e "${GRAY}  yads start                           # Start core services${NC}"
    echo -e "${GRAY}  yads project myapp laravel           # Create Laravel project${NC}"
    echo -e "${GRAY}  yads db create mydb mysql           # Create MySQL database${NC}"
    echo -e "${GRAY}  yads logs traefik                   # Show Traefik logs${NC}"
    echo -e "${GRAY}  yads status                          # Show service status${NC}"
    echo
    echo -e "${YELLOW}Prerequisites:${NC}"
    echo -e "${GRAY}  - Docker and Docker Compose installed${NC}"
    echo -e "${GRAY}  - .env file configured${NC}"
    echo -e "${GRAY}  - Cloudflare account (for tunnels)${NC}"
}

# Main command handler
main() {
    setup_colors
    
    # Handle help and version flags
    case "${1:-}" in
        -h|--help|help)
            show_help
            exit 0
            ;;
        -v|--version|version)
            echo "YADS 2.0.0 (Docker Edition)"
            exit 0
            ;;
        "")
            show_help
            exit 1
            ;;
    esac
    
    local command="$1"
    shift 2>/dev/null || true
    
    # Check prerequisites
    check_docker
    check_docker_compose
    
    case "$command" in
        start)
            start_core
            ;;
        stop)
            stop_core
            ;;
        restart)
            restart_core
            ;;
        status)
            show_status
            ;;
        logs)
            show_logs "${1:-}"
            ;;
        update)
            update_containers
            ;;
        project)
            if [[ -z "${1:-}" ]]; then
                error_exit "Project name required. Use 'yads project <name> [type]'"
            fi
            create_project "$1" "${2:-php}"
            ;;
        setup)
            if [[ -z "${1:-}" ]]; then
                error_exit "Project name required. Use 'yads setup <name>'"
            fi
            setup_project "$1"
            ;;
        stop-project)
            if [[ -z "${1:-}" ]]; then
                error_exit "Project name required. Use 'yads stop-project <name>'"
            fi
            stop_project "$1"
            ;;
        list-projects)
            list_projects
            ;;
        db)
            case "${1:-}" in
                create)
                    if [[ -z "${2:-}" ]]; then
                        error_exit "Database name required. Use 'yads db create <name> [type]'"
                    fi
                    create_database "$2" "${3:-mysql}"
                    ;;
                list)
                    list_databases
                    ;;
                *)
                    error_exit "Unknown database command: ${1:-}. Use 'yads db create' or 'yads db list'"
                    ;;
            esac
            ;;
        restart)
            if [[ -z "${1:-}" ]]; then
                error_exit "Service name required. Use 'yads restart <service>'"
            fi
            restart_service "$1"
            ;;
        backup)
            backup_data
            ;;
        *)
            error_exit "Unknown command: $command. Use 'yads help' for available commands."
            ;;
    esac
}

# Run main function with all arguments
main "$@"