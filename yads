#!/bin/bash

# YADS - Yet Another Development Server
# A comprehensive PHP development server setup script

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
YADS_DIR="$HOME/.yads"
CONFIG_FILE="$YADS_DIR/config"
LOG_FILE="$YADS_DIR/yads.log"

# Create YADS directory if it doesn't exist
mkdir -p "$YADS_DIR"

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
    echo -e "$1"
}

# Error handling
error_exit() {
    log "${RED}ERROR: $1${NC}"
    exit 1
}

# Success message
success() {
    log "${GREEN}✓ $1${NC}"
}

# Warning message
warning() {
    log "${YELLOW}⚠ $1${NC}"
}

# Info message
info() {
    log "${BLUE}ℹ $1${NC}"
}

# Check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        error_exit "This script should not be run as root. Please run as a regular user with sudo privileges."
    fi
}

# Check if sudo is available
check_sudo() {
    if ! command -v sudo &> /dev/null; then
        error_exit "sudo is required but not installed. Please install sudo first."
    fi
}

# Detect OS
detect_os() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS=$ID
        OS_VERSION=$VERSION_ID
    elif type lsb_release >/dev/null 2>&1; then
        OS=$(lsb_release -si | tr '[:upper:]' '[:lower:]')
        OS_VERSION=$(lsb_release -sr)
    else
        error_exit "Cannot detect operating system"
    fi
    
    log "${CYAN}Detected OS: $OS $OS_VERSION${NC}"
}

# Load configuration
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    else
        # Default configuration
        WEB_SERVER="nginx"
        PHP_VERSION="8.4"
        DOMAIN=""
        CLOUDFLARE_TOKEN=""
        GITHUB_TOKEN=""
    fi
}

# Save configuration
save_config() {
    cat > "$CONFIG_FILE" << EOF
WEB_SERVER="$WEB_SERVER"
PHP_VERSION="$PHP_VERSION"
DOMAIN="$DOMAIN"
CLOUDFLARE_TOKEN="$CLOUDFLARE_TOKEN"
GITHUB_TOKEN="$GITHUB_TOKEN"
EOF
}

# Show help
show_help() {
    cat << EOF
${CYAN}YADS - Yet Another Development Server${NC}

${GREEN}Usage:${NC}
    yads <command> [options]

${GREEN}Commands:${NC}
    ${YELLOW}install${NC}           Install all required software and configure the development server
    ${YELLOW}domains${NC}           Configure domain settings and SSL certificates
    ${YELLOW}create <project> [repo]${NC}  Create a new PHP project with optional Git repository
    ${YELLOW}status${NC}            Show current installation status
    ${YELLOW}prerequisites${NC}     Check system prerequisites before installation
    ${YELLOW}check${NC}             Verify YADS global availability
    ${YELLOW}code-server${NC}       Set up VS Code Server for remote development
    ${YELLOW}update${NC}            Update installed software
    ${YELLOW}uninstall${NC}         Remove all YADS components
    ${YELLOW}help${NC}              Show this help message

${GREEN}Examples:${NC}
    yads install
    yads domains
    yads create my-laravel-app
    yads create erp https://github.com/user/erp-system.git
    yads create blog user/blog-repo
    yads domains
    yads code-server
    yads status

${GREEN}Prerequisites for Installation:${NC}
    ${YELLOW}System Requirements:${NC}
    • Operating System: Ubuntu 20.04+, Debian 11+, CentOS 8+, RHEL 8+, Fedora 35+, Arch Linux
    • Memory: Minimum 2GB RAM (4GB recommended)
    • Storage: Minimum 10GB free space
    • Network: Internet connection for package downloads
    • Domain: A domain name for SSL certificates and remote access

    ${YELLOW}Required Commands:${NC}
    • curl, wget, tar, gzip, openssl
    • sudo access (for package installation)
    • Git (for project management)

    ${YELLOW}What Gets Installed:${NC}
    • PHP 8.4 with extensions (MySQL, PostgreSQL, Redis, Memcached, Xdebug)
    • MySQL and PostgreSQL databases
    • NGINX or FrankenPHP web server (your choice)
    • Composer and Laravel installer
    • GitHub CLI and Cursor AI CLI
    • Cloudflare tunnel for remote access
    • SSL certificates with Let's Encrypt

    ${YELLOW}Installation Time:${NC}
    • Fast connection: 5-10 minutes
    • Slow connection: 15-30 minutes
    • Total download size: ~500MB

${GREEN}Configuration:${NC}
    Config file: $CONFIG_FILE
    Log file: $LOG_FILE
EOF
}

# Show installation status
show_status() {
    log "${CYAN}YADS Installation Status${NC}"
    echo
    
    # Check PHP
    if command -v php &> /dev/null; then
        PHP_VER=$(php -v | head -n1 | cut -d' ' -f2)
        success "PHP $PHP_VER is installed"
    else
        warning "PHP is not installed"
    fi
    
    # Check MySQL
    if command -v mysql &> /dev/null; then
        success "MySQL is installed"
    else
        warning "MySQL is not installed"
    fi
    
    # Check PostgreSQL
    if command -v psql &> /dev/null; then
        success "PostgreSQL is installed"
    else
        warning "PostgreSQL is not installed"
    fi
    
    # Check Cloudflare tunnel
    if command -v cloudflared &> /dev/null; then
        success "Cloudflare tunnel is installed"
    else
        warning "Cloudflare tunnel is not installed"
    fi
    
    # Check GitHub CLI
    if command -v gh &> /dev/null; then
        success "GitHub CLI is installed"
    else
        warning "GitHub CLI is not installed"
    fi
    
    # Check Cursor CLI
    if command -v cursor &> /dev/null; then
        success "Cursor CLI is installed"
    else
        warning "Cursor CLI is not installed"
    fi
    
    # Check Composer
    if command -v composer &> /dev/null; then
        success "Composer is installed"
    else
        warning "Composer is not installed"
    fi
    
    # Check web server
    if command -v nginx &> /dev/null; then
        success "NGINX is installed"
    elif command -v frankenphp &> /dev/null; then
        success "FrankenPHP is installed"
    else
        warning "No web server is installed"
    fi
}

# Check if YADS is globally available
check_global_availability() {
    if command -v yads &> /dev/null; then
        success "YADS is globally available"
        info "You can use 'yads' from anywhere in your system"
    else
        warning "YADS is not globally available"
        info "You may need to restart your terminal or run 'source ~/.bashrc'"
    fi
}

# Show prerequisites information
show_prerequisites() {
    log "${CYAN}YADS Installation Prerequisites${NC}"
    echo
    
    log "${YELLOW}System Requirements:${NC}"
    echo "  • Operating System: Ubuntu 20.04+, Debian 11+, CentOS 8+, RHEL 8+, Fedora 35+, Arch Linux"
    echo "  • Memory: Minimum 2GB RAM (4GB recommended)"
    echo "  • Storage: Minimum 10GB free space"
    echo "  • Network: Internet connection for package downloads"
    echo "  • Domain: A domain name for SSL certificates and remote access"
    echo
    
    log "${YELLOW}Required Commands:${NC}"
    local required_commands=("curl" "wget" "tar" "gzip" "openssl" "git")
    for cmd in "${required_commands[@]}"; do
        if command -v "$cmd" &> /dev/null; then
            success "$cmd is available"
        else
            warning "$cmd is missing"
        fi
    done
    echo
    
    log "${YELLOW}System Checks:${NC}"
    
    # Check if running as root
    if [[ $EUID -eq 0 ]]; then
        warning "Running as root - this is not recommended"
    else
        success "Running as regular user"
    fi
    
    # Check sudo access
    if sudo -n true 2>/dev/null; then
        success "Sudo access available"
    else
        warning "Sudo access required - you may be prompted for password"
    fi
    
    # Check internet connectivity
    if ping -c 1 google.com &> /dev/null; then
        success "Internet connectivity available"
    else
        warning "Internet connectivity issues detected"
    fi
    
    # Check available disk space
    local available_space=$(df / | awk 'NR==2 {print $4}')
    if [[ $available_space -gt 2097152 ]]; then  # 2GB in KB
        success "Sufficient disk space available ($(($available_space / 1024 / 1024))GB free)"
    else
        warning "Low disk space detected ($(($available_space / 1024 / 1024))GB free)"
    fi
    
    # Check memory
    local total_memory=$(free -m | awk 'NR==2{print $2}')
    if [[ $total_memory -gt 1024 ]]; then
        success "Sufficient memory available (${total_memory}MB total)"
    else
        warning "Low memory detected (${total_memory}MB total)"
    fi
    
    echo
    log "${YELLOW}What Gets Installed:${NC}"
    echo "  • PHP 8.4 with extensions (MySQL, PostgreSQL, Redis, Memcached, Xdebug)"
    echo "  • MySQL and PostgreSQL databases"
    echo "  • NGINX or FrankenPHP web server (your choice)"
    echo "  • Composer and Laravel installer"
    echo "  • GitHub CLI and Cursor AI CLI"
    echo "  • Cloudflare tunnel for remote access"
    echo "  • SSL certificates with Let's Encrypt"
    echo
    
    log "${YELLOW}Installation Time:${NC}"
    echo "  • Fast connection: 5-10 minutes"
    echo "  • Slow connection: 15-30 minutes"
    echo "  • Total download size: ~500MB"
    echo
    
    log "${BLUE}Ready to install? Run: yads install${NC}"
}

# Setup code-server
setup_code_server() {
    log "${CYAN}Setting up Code Server (VS Code Server)...${NC}"
    
    # Check if code-server is installed
    if ! command -v code-server &> /dev/null; then
        info "Installing code-server..."
        
        # Download and install code-server
        curl -fsSL https://code-server.dev/install.sh | sh
        
        if [[ $? -eq 0 ]]; then
            success "Code Server installed successfully"
        else
            error_exit "Failed to install Code Server"
        fi
    else
        success "Code Server is already installed"
    fi
    
    # Create systemd service for code-server
    create_code_server_service
    
    # Show usage instructions
    show_code_server_instructions
}

# Create code-server systemd service
create_code_server_service() {
    info "Creating Code Server systemd service..."
    
    # Create service file
    sudo tee /etc/systemd/system/code-server.service > /dev/null << EOF
[Unit]
Description=Code Server
After=network.target

[Service]
Type=simple
User=$USER
Group=$USER
ExecStart=/usr/local/bin/code-server --bind-addr 0.0.0.0:8080 --auth none
Restart=always
RestartSec=5
WorkingDirectory=$HOME

[Install]
WantedBy=multi-user.target
EOF
    
    # Enable and start service
    sudo systemctl daemon-reload
    sudo systemctl enable code-server
    sudo systemctl start code-server
    
    success "Code Server service created and started"
}

# Show code-server instructions
show_code_server_instructions() {
    log "${CYAN}Code Server Setup Complete!${NC}"
    echo
    log "${GREEN}Access your VS Code Server at:${NC}"
    echo "  • https://vscode.${DOMAIN:-yourdomain.com}"
    echo "  • https://code.${DOMAIN:-yourdomain.com}"
    echo "  • https://editor.${DOMAIN:-yourdomain.com}"
    echo "  • https://developer.${DOMAIN:-yourdomain.com}"
    echo
    log "${GREEN}Service Management:${NC}"
    echo "  • Start: sudo systemctl start code-server"
    echo "  • Stop: sudo systemctl stop code-server"
    echo "  • Status: sudo systemctl status code-server"
    echo "  • Logs: sudo journalctl -u code-server -f"
    echo
    log "${YELLOW}Note: Make sure you've run 'yads domains' to configure your domain first!${NC}"
}

# Main command handler
main() {
    case "${1:-help}" in
        "install")
            check_root
            check_sudo
            detect_os
            load_config
            install_all
            ;;
        "domains")
            load_config
            configure_domains
            ;;
        "create")
            if [[ -z "${2:-}" ]]; then
                error_exit "Project name is required. Usage: yads create <project-name> [git-repo]"
            fi
            load_config
            create_project "$2" "${3:-}"
            ;;
        "status")
            show_status
            ;;
        "prerequisites"|"prereq")
            show_prerequisites
            ;;
        "check"|"verify")
            check_global_availability
            ;;
        "code-server"|"vscode")
            setup_code_server
            ;;
        "update")
            check_sudo
            update_software
            ;;
        "uninstall")
            check_sudo
            uninstall_all
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            error_exit "Unknown command: $1. Use 'yads help' for available commands."
            ;;
    esac
}

# Source additional modules
source "$(dirname "$0")/modules/install.sh" 2>/dev/null || true
source "$(dirname "$0")/modules/domains.sh" 2>/dev/null || true
source "$(dirname "$0")/modules/projects.sh" 2>/dev/null || true

# Run main function with all arguments
main "$@"

